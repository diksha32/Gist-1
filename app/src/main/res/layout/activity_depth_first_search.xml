<?xml version="1.0" encoding="utf-8"?>
<ScrollView xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:fillViewport="true">
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:paddingBottom="@dimen/activity_vertical_margin"
    android:paddingLeft="@dimen/activity_horizontal_margin"
    android:paddingRight="@dimen/activity_horizontal_margin"
    android:paddingTop="@dimen/activity_vertical_margin"
    android:orientation="vertical"
    android:background="#00796b"
    tools:context="com.example.hp.above.DepthFirstSearchActivity">

    <TextView
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:text="Graph | Depth First Traversal"
        android:textSize="20sp"
        android:textStyle="bold"
        android:background="#009688"
        android:textColor="#ffffff"
        android:layout_marginBottom="32dp"
        android:layout_marginTop="32dp"/>

    <TextView
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:textColor="#ffffff"
        android:text="\nDepth First Traversal (or Search) for a graph is similar to Depth First Traversal of a tree.
   \\n\nThe only catch here is, unlike trees, graphs may contain cycles, so we may come to the same node again. To avoid processing a node more than once, we use a boolean visited array.
\n\nFor example, in the following graph, we start traversal from vertex 2. When we come to vertex 0, we look for all adjacent vertices of it. 2 is also an adjacent vertex of 0.
\n\nIf we don’t mark visited vertices, then 2 will be processed again and it will become a non-terminating process. A Depth First Traversal of the following graph is 2, 0, 1, 3.
"/>

    <ImageView
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:src="@drawable/dfs1"
        android:scaleType="fitCenter"
        android:layout_margin="8dp"/>

    <TextView
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:textColor="#ffffff"
        android:text="\n\nFollowing are implementations of simple Depth First Traversal.
\n\nThe C++ implementation uses adjacency list representation of graphs. STL‘s list container is used to store lists of adjacent nodes.
        \n\n"/>

    <TextView
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="\n\nRead More..\n\n"
        android:textColor="#ffffff"
        android:onClick="dfs_code"
        android:id="@+id/dfs_code"/>

</LinearLayout>
</ScrollView>