<?xml version="1.0" encoding="utf-8"?>
<ScrollView xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:fillViewport="true">
    <LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
        xmlns:tools="http://schemas.android.com/tools"
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        android:paddingBottom="@dimen/activity_vertical_margin"
        android:paddingLeft="@dimen/activity_horizontal_margin"
        android:paddingRight="@dimen/activity_horizontal_margin"
        android:paddingTop="@dimen/activity_vertical_margin"
        android:orientation="vertical"
        android:background="@drawable/background6"
        tools:context="com.example.hp.above.ExceptionHandlingActivity">


        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:background="#311B92"
            android:textColor="#FFFFFF"
            android:textSize="20sp"
            android:text="Exception Handling"/>

        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:textColor="#FFFFFF"
            android:text="\n\nException Handling is the mechanism to handle runtime malfunctions. We need to handle such exceptions to prevent abrupt termination of program. The term exception means exceptional condition, it is a problem that may arise during the execution of program. A bunch of things can lead to exceptions, including programmer error, hardware failures, files that need to be opened cannot be found, resource exhaustion etc."/>



        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:background="#311B92"
            android:textColor="#FFFFFF"
            android:textSize="20sp"
            android:layout_marginTop="10dp"
            android:text="Exception"/>

        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:textColor="#FFFFFF"
            android:text="\n\nA Java Exception is an object that describes the exception that occurs in a program. When an exceptional events occurs in java, an exception is said to be thrown. The code that's responsible for doing something about the exception is called an exception handler.

"/>




        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:background="#311B92"
            android:textColor="#FFFFFF"
            android:textSize="20sp"
            android:layout_marginTop="10dp"
            android:text="Exception class hierarchy"/>

        <TextView
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:textColor="#FFFFFF"
            android:text="\n\nAll exception types are subclasses of class Throwable, which is at the top of exception class hierarchy.
"/>


        <ImageView
            android:src="@drawable/exceptionclasshierarchy"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:scaleType="fitXY"
            android:layout_marginTop="10dp"/>

        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:background="#311B92"
            android:textColor="#FFFFFF"
            android:textSize="20sp"
            android:layout_marginTop="10dp"
            android:text="Categories of Exception "/>

        <TextView
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:textColor="#FFFFFF"
            android:text="\n\nChecked Exception
\nThe exception that can be predicted by the programmer.Example : File that need to be opened is not found. These type of exceptions must be checked at compile time.

\n1. Unchecked Exception
\n2. Unchecked exceptions are the class that extends RuntimeException. Unchecked exception are ignored at compile time. Example : ArithmeticException, NullPointerException, Array Index out of Bound exception. Unchecked exceptions are checked at runtime.

\n\nError
\nErrors are typically ignored in code because you can rarely do anything about an error. Example : if stack overflow occurs, an error will arise. This type of error is not possible handle in code.
"/>




    </LinearLayout>
</ScrollView>