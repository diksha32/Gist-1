<?xml version="1.0" encoding="utf-8"?>
<ScrollView xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:fillViewport="true">
    <LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
        xmlns:tools="http://schemas.android.com/tools"
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        android:paddingBottom="@dimen/activity_vertical_margin"
        android:paddingLeft="@dimen/activity_horizontal_margin"
        android:paddingRight="@dimen/activity_horizontal_margin"
        android:paddingTop="@dimen/activity_vertical_margin"
        android:orientation="vertical"
        android:background="@drawable/background6"
        tools:context="com.example.hp.above.JavaClassesActivity">


        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:background="#311B92"
            android:textColor="#FFFFFF"
            android:textSize="25sp"
            android:text="Objects and Classes"/>

        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:textColor="#FFFFFF"
            android:text="\n\nJava is known as a strong Object oriented programming language(oops).

\nOOPS is a programming approach which provides solution to problems with the help of algorithms based on real world. It uses real world approach to solve a problem. So object oriented technique offers better and easy way to write program then procedural programming model such as C, ALGOL, PASCAL."/>


        <View
            android:layout_width="match_parent"
            android:layout_height="2dp"
            android:layout_marginTop="5sp"
            android:layout_marginBottom="5dp"
            android:background="@android:color/darker_gray"/>

        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:background="#311B92"
            android:textColor="#FFFFFF"
            android:textSize="25sp"
            android:text="Class"/>

        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:textColor="#FFFFFF"
            android:text="\n\nIn Java everything is encapsulated under classes.  Class can be defined as a template/ blueprint that describe the behaviors /states of a particular entity. A class defines new data type. Once defined this new type can be used to create object of that type.
\nObject is an instance of class. You may also call it as physical existence of a logical template class.

\nA class is declared using 'class' keyword. A class contain both data and code that operate on that data. The data or variables defined within a class are called instance variables and the code that operates on this data is known as methods."/>


        <View
            android:layout_width="match_parent"
            android:layout_height="2dp"
            android:layout_marginTop="5sp"
            android:layout_marginBottom="5dp"
            android:background="@android:color/darker_gray"/>

        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:background="#311B92"
            android:textColor="#FFFFFF"
            android:textSize="25sp"
            android:text="Methods in Java"/>

        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:textColor="#FFFFFF"
            android:text="\n\nMethod describe behavior of an object. A method is a collection of statements that are group together to perform an operation.

\nSyntax :

\nreturn-type methodName(parameter-list)
\n{
\n //body of method
\n}"/>


        <View
            android:layout_width="match_parent"
            android:layout_height="2dp"
            android:layout_marginTop="5sp"
            android:layout_marginBottom="5dp"
            android:background="@android:color/darker_gray"/>

        <TextView
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:textSize="20sp"
            android:textStyle="bold"
            android:textColor="#ffffff"
            android:text="\nTerms Of Method"/>

        <TextView
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:textColor="#FFFFFF"
            android:text="\n\n1) Modifier : Modifier are access type of method. We will discuss it in detail later.

\n2) Return Type : A method may return value. Data type of value return by a method is declare in method heading.

\n3) Method name : Actual name of the method.

\n4) Parameter : Value passed to a method.

\n5) Method body : collection of statement that defines what method does."/>


        <TextView
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:textSize="20sp"
            android:textStyle="bold"
            android:textColor="#FFFFFF"
            android:text="\nParameters "/>

        <ImageView
            android:src="@drawable/parametervsargument"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content" />


        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:background="#311B92"
            android:textColor="#FFFFFF"
            android:textSize="25sp"
            android:text="Method Overloading"/>
        <TextView
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:textColor="#FFFFFF"
            android:text="\n\nIf two or more method in a class have same name but different parameters, it is known as method overloading."/>


        <ImageView
            android:src="@drawable/overloading"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:scaleType="fitStart"
            android:layout_marginTop="10dp"/>









    </LinearLayout>
</ScrollView>