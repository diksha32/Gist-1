<?xml version="1.0" encoding="utf-8"?>
<ScrollView xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:fillViewport="true">
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:paddingBottom="@dimen/activity_vertical_margin"
    android:paddingLeft="@dimen/activity_horizontal_margin"
    android:paddingRight="@dimen/activity_horizontal_margin"
    android:paddingTop="@dimen/activity_vertical_margin"
    android:orientation="vertical"
    android:background="#00796b"
    tools:context="com.example.hp.above.NQueensProblemActivity">

    <TextView
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:text="Backtracking | N Queen Problem"
        android:textSize="20sp"
        android:textStyle="bold"
        android:textColor="#ffffff"
        android:background="#009688"
        android:layout_marginBottom="32dp"
        android:layout_marginTop="32dp"
        />

    <TextView
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:textColor="#ffffff"
        android:text="\nThe N Queen is the problem of placing N chess queens on an NÃ—N chessboard so that no two queens attack each other. For example, following is a solution for 4 Queen problem.
        \n\n"/>

    <ImageView
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:src="@drawable/nqueens1"
        android:scaleType="fitCenter"
        android:layout_margin="8dp"/>
    
    <TextView
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:textColor="#ffffff"
        android:text="\n\nThe expected output is a binary matrix which has 1s for the blocks where queens are placed. For example following is the output matrix for above 4 queen solution.
\n
\n              { 0,  1,  0,  0}
\n              { 0,  0,  0,  1}
\n              { 1,  0,  0,  0}
\n              { 0,  0,  1,  0}
\nNaive Algorithm
\n\nGenerate all possible configurations of queens on board and print a configuration that satisfies the given constraints.
\n
\nwhile there are untried conflagrations
\n{
\n   generate the next configuration
\n   if queens don't attack in this configuration then
\n   {
\n      print this configuration;
\n   }
\n}
\nBacktracking Algorithm
\nThe idea is to place queens one by one in different columns, starting from the leftmost column. When we place a queen in a column, we check for clashes with already placed queens. In the current column, if we find a row for which there is no clash, we mark this row and column as part of the solution. If we do not find such a row due to clashes then we backtrack and return false.
\n
\n1) Start in the leftmost column
\n2) If all queens are placed
\n    return true
\n3) Try all rows in the current column.  Do following for every tried row.
\n    a) If the queen can be placed safely in this row then mark this [row, column] as part of the solution and recursively check if placing queen here leads to a solution.
\n    b) If placing queen in [row, column] leads to a solution then return true.
\n    c) If placing queen doesn't lead to a solution then umark this [row, column] (Backtrack) and go to step (a) to try other rows.
\n3) If all rows have been tried and nothing worked, return false to trigger backtracking.
\nImplementation of Backtracking solution"/>


    <TextView
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="\n\nRead More..\n\n"
        android:textColor="#ffffff"
        android:onClick="nqueens_code"
        android:id="@+id/nqueens_code"/>

</LinearLayout>
</ScrollView>