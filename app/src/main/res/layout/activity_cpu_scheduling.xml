<?xml version="1.0" encoding="utf-8"?>
<ScrollView xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:fillViewport="true">
    <LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
        xmlns:tools="http://schemas.android.com/tools"
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        android:paddingBottom="@dimen/activity_vertical_margin"
        android:paddingLeft="@dimen/activity_horizontal_margin"
        android:paddingRight="@dimen/activity_horizontal_margin"
        android:paddingTop="@dimen/activity_vertical_margin"
        android:orientation="vertical"
        android:background="@drawable/english"
        tools:context="com.example.hp.above.CpuSchedulingActivity">

        <TextView
            android:layout_width="match_parent"
            android:textColor="#FFFFFF"
            android:background="#78909C"
            android:layout_height="wrap_content"
            android:text="CPU Scheduling"
            android:textSize="20sp"
            android:textStyle="bold"
            android:layout_margin="8dp"/>

        <TextView
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:textColor="#FFFF00"
            android:text="\nCPU scheduling is a process which allows one process to use the CPU while the execution of another process is on hold(in waiting state) due to unavailability of any resource like I/O etc, thereby making full use of CPU. The aim of CPU scheduling is to make the system efficient, fast and fair.
\n
"/>

        <TextView
            android:layout_width="match_parent"
            android:textColor="#FFFFFF"
            android:background="#78909C"
            android:layout_marginTop="10dp"
            android:layout_height="wrap_content"
            android:text="Scheduling Criteria"
            android:textSize="16sp"
            android:textStyle="bold"
            android:layout_margin="8dp"/>

        <TextView
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:textColor="#FFFF00"
            android:text="\nThere are many different criteria's to check when considering the 'best' scheduling algorithm :
\n
\n1. CPU utilization
\nTo make out the best use of CPU and not to waste any CPU cycle, CPU would be working most of the time(Ideally 100% of the time). Considering a real system, CPU usage should range from 40% (lightly loaded) to 90% (heavily loaded.)
\n
\n2. Throughput
\nIt is the total number of processes completed per unit time or rather say total amount of work done in a unit of time. This may range from 10/second to 1/hour depending on the specific processes.
\n
\n3. Turnaround time
\nIt is the amount of time taken to execute a particular process, i.e. The interval from time of submission of the process to the time of completion of the process(Wall clock time).
\n
\n4. Waiting time
\nThe sum of the periods spent waiting in the ready queue amount of time a process has been waiting in the ready queue to acquire get control on the CPU.
\n
\n5. Load average
\nIt is the average number of processes residing in the ready queue waiting for their turn to get into the CPU.
\n
\n6. Response time
\nAmount of time it takes from when a request was submitted until the first response is produced. Remember, it is the time till the first response and not the completion of process execution(final response).
\n
\nIn general CPU utilization and Throughput are maximized and other factors are reduced for proper optimization."/>

        <TextView
            android:layout_width="match_parent"
            android:textColor="#FFFFFF"
            android:background="#78909C"
            android:layout_marginTop="10dp"
            android:layout_height="wrap_content"
            android:text="Scheduling Algorithms"
            android:textSize="16sp"
            android:textStyle="bold"
            android:layout_margin="8dp"/>

        <TextView
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:textColor="#FFFF00"
            android:text="\nWe'll discuss four major scheduling algorithms here which are following :
\n
\n1. First Come First Serve(FCFS) Scheduling
\n2. Shortest-Job-First(SJF) Scheduling
\n3. Priority Scheduling
\n4. Round Robin(RR) Scheduling
\n5. Multilevel Queue Scheduling"/>
        <TextView
            android:layout_width="match_parent"
            android:textColor="#FFFFFF"
            android:background="#78909C"
            android:layout_marginTop="10dp"
            android:layout_height="wrap_content"
            android:text="First Come First Serve(FCFS) Scheduling"
            android:textSize="16sp"
            android:textStyle="bold"
            android:layout_margin="8dp"/>

        <TextView
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:textColor="#FFFF00"
            android:text="\n1. Jobs are executed on first come, first serve basis.
\n2. Easy to understand and implement.
\n3. Poor in performance as average wait time is high."/>

        <ImageView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:src="@drawable/cpu1"/>

        <TextView
            android:layout_width="match_parent"
            android:textColor="#FFFFFF"
            android:background="#78909C"
            android:layout_marginTop="10dp"
            android:layout_height="wrap_content"
            android:text="Shortest-Job-First(SJF) Scheduling"
            android:textSize="16sp"
            android:textStyle="bold"
            android:layout_margin="8dp"/>

        <TextView
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:textColor="#FFFF00"
            android:text="\n1. Best approach to minimize waiting time.
\n2. Actual time taken by the process is already known to processor.
\n3. Impossible to implement."/>

        <ImageView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:src="@drawable/cpu2"/>

        <TextView
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:textColor="#FFFF00"
            android:text="\nIn Preemptive Shortest Job First Scheduling, jobs are put into ready queue as they arrive, but as a process with short burst time arrives, the existing process is preemptied.
        "/>

        <ImageView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:src="@drawable/cpu3"/>


        <TextView
            android:layout_width="match_parent"
            android:textColor="#FFFFFF"
            android:background="#78909C"
            android:layout_marginTop="10dp"
            android:layout_height="wrap_content"
            android:text="Priority Scheduling"
            android:textSize="16sp"
            android:textStyle="bold"
            android:layout_margin="8dp"/>

        <TextView
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:textColor="#FFFF00"
            android:text="\n1. Priority is assigned for each process.
\n2. Process with highest priority is executed first and so on.
\n3. Processes with same priority are executed in FCFS manner.
\n4. Priority can be decided based on memory requirements, time requirements or any other resource requirement."/>

        <ImageView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:src="@drawable/cpu4"/>

        <TextView
            android:layout_width="match_parent"
            android:textColor="#FFFFFF"
            android:background="#78909C"
            android:layout_marginTop="10dp"
            android:layout_height="wrap_content"
            android:text="Round Robin(RR) Scheduling"
            android:textSize="16sp"
            android:textStyle="bold"
            android:layout_margin="8dp"/>

        <TextView
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:textColor="#FFFF00"
            android:text="\n1. A fixed time is allotted to each process, called quantum, for execution.
\n2. Once a process is executed for given time period that process is preemptied and other process executes for given time period.
\n3. Context switching is used to save states of preemptied processes."/>

        <ImageView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:src="@drawable/cpu5"/>

        <TextView
            android:layout_width="match_parent"
            android:textColor="#FFFFFF"
            android:background="#78909C"
            android:layout_marginTop="10dp"
            android:layout_height="wrap_content"
            android:text="Multilevel Queue Scheduling"
            android:textSize="16sp"
            android:textStyle="bold"
            android:layout_margin="8dp"/>

        <TextView
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:textColor="#FFFF00"
            android:text="\nMultiple queues are maintained for processes.
\n\n1. Each queue can have its own scheduling algorithms.
\n2. Priorities are assigned to each queue."/>




    </LinearLayout>
</ScrollView>