<?xml version="1.0" encoding="utf-8"?>
<ScrollView xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:fillViewport="true">
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:paddingBottom="@dimen/activity_vertical_margin"
    android:paddingLeft="@dimen/activity_horizontal_margin"
    android:paddingRight="@dimen/activity_horizontal_margin"
    android:paddingTop="@dimen/activity_vertical_margin"
    android:orientation="vertical"
    android:background="#00796b"
    tools:context="com.example.hp.above.HamiltonianCycleActivity">

    <TextView
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:text="Backtracking | Hamiltonian Cycle"
        android:textSize="20sp"
        android:textStyle="bold"
        android:background="#009688"
        android:textColor="#ffffff"
        android:layout_marginTop="32dp"
        android:layout_marginBottom="32dp"/>

    <TextView
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:textColor="#ffffff"
        android:text="\nHamiltonian Path in an undirected graph is a path that visits each vertex exactly once. A Hamiltonian cycle (or Hamiltonian circuit) is a Hamiltonian Path such that there is an edge (in graph) from the last vertex to the first vertex of the Hamiltonian Path. Determine whether a given graph contains Hamiltonian Cycle or not. If it contains, then print the path. Following are the input and output of the required function.
\n
\nInput:
\nA 2D array graph(V)(V) where V is the number of vertices in graph and graph(V)(V) is adjacency matrix representation of the graph. A value graph(i)(j) is 1 if there is a direct edge from i to j, otherwise graph[i][j] is 0.
\n
\nOutput:
\nAn array path(V) that should contain the Hamiltonian Path. path(i) should represent the ith vertex in the Hamiltonian Path. The code should also return false if there is no Hamiltonian Cycle in the graph.
\n
\nFor example, a Hamiltonian Cycle in the following graph is {0, 1, 2, 4, 3, 0}. There are more Hamiltonian Cycles in the graph like {0, 3, 4, 2, 1, 0}
\n
\n(0)--(1)--(2)
\n |   / \   |
\n |  /   \  |
\n | /     \ |
\n(3)-------(4)
\nAnd the following graph doesnâ€™t contain any Hamiltonian Cycle.
\n
\n
\n(0)--(1)--(2)
\n |   / \   |
\n |  /   \  |
\n | /     \ |
\n(3)      (4)
\nNaive Algorithm
\nGenerate all possible configurations of vertices and print a configuration that satisfies the given constraints. There will be n! (n factorial) configurations.
\n
\nwhile there are untried conflagrations
\n{
\n   generate the next configuration
\n   if ( there are edges between two consecutive vertices of this
\n      configuration and there is an edge from the last vertex to
\n      the first ).
\n   {
\n      print this configuration;
\n      break;
\n   }
\n}
\nBacktracking Algorithm
\nCreate an empty path array and add vertex 0 to it. Add other vertices, starting from the vertex 1. Before adding a vertex, check for whether it is adjacent to the previously added vertex and not already added. If we find such a vertex, we add the vertex as part of the solution. If we do not find a vertex then we return false.
\n
\nImplementation of Backtracking solution
\nFollowing are implementations of the Backtracking solution.\n\n"/>



    <TextView
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:textColor="#ffffff"
        android:text="\n\nRead More..\n\n"
        android:onClick="hamiltonian_code"
        android:id="@+id/hamiltonian_code"/>

</LinearLayout>
</ScrollView>