<?xml version="1.0" encoding="utf-8"?>
<ScrollView xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:fillViewport="true">
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:paddingBottom="@dimen/activity_vertical_margin"
    android:paddingLeft="@dimen/activity_horizontal_margin"
    android:paddingRight="@dimen/activity_horizontal_margin"
    android:orientation="vertical"
    android:paddingTop="@dimen/activity_vertical_margin"
    android:background="#000033"
    tools:context="com.example.hp.above.HeapActivity">
    <TextView
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:text="BINARY HEAP : PROPERTIES"
        android:textSize="20sp"
        android:background="#5C6BC0"
        android:textColor="#ffffff"
        android:layout_margin="8dp"
        android:textStyle="bold"/>
    <TextView
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:textColor="#ffffff"
        android:text="
\n\n1) It’s a complete tree (All levels are completely filled except possibly the last level and the last level has all keys as left as possible). This property of Binary Heap makes them suitable to be stored in an array.
\n\n2) A Binary Heap is either Min Heap or Max Heap. In a Min Binary Heap, the key at root must be minimum among all keys present in Binary Heap. The same property must be recursively true for all nodes in Binary Tree. Max Binary Heap is similar to Min Heap.\n"/>

    <TextView
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:text="APPLICATIONS OF HEAP"
        android:textSize="20sp"
        android:background="#5C6BC0"
        android:textColor="#ffffff"
        android:layout_margin="8dp"
        android:textStyle="bold"/>

    <TextView
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:textColor="#ffffff"
        android:text="
\n1) Heap Sort: Heap Sort uses Binary Heap to sort an array in O(nLogn) time.
\n\n2) Priority Queue: Priority queues can be efficiently implemented using Binary Heap because it supports insert(), delete() and extractmax(), decreaseKey() operations in O(logn) time. Binomoial Heap and Fibonacci Heap are variations of Binary Heap. These variations perform union also efficiently.
\n\n3) Graph Algorithms: The priority queues are especially used in Graph Algorithms like Dijkstra’s Shortest Path and Prim’s Minimum Spanning Tree.
\n\n4) Many problems can be efficiently solved using Heaps. See following for example.
\n\na) K’th Largest Element in an array.
\n\nb) Sort an almost sorted array.
\n\nc) Merge K Sorted Arrays.\n"/>

    <TextView
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:text="OPERATIONS ON MIN HEAP"
        android:textSize="20sp"
        android:background="#5C6BC0"
        android:textColor="#ffffff"
        android:layout_margin="8dp"
        android:textStyle="bold"/>
<TextView
    android:layout_width="match_parent"
    android:layout_height="wrap_content"
    android:text="\n\n1) getMini(): It returns the root element of Min Heap. Time Complexity of this operation is O(1).
\n\n2) extractMin(): Removes the minimum element from Min Heap. Time Complexity of this Operation is O(Logn) as this operation needs to maintain the heap property (by calling heapify()) after removing root.
\n\n3) decreaseKey(): Decreases value of key. Time complexity of this operation is O(Logn). If the decreases key value of a node is greater than parent of the node, then we don’t need to do anything. Otherwise, we need to traverse up to fix the violated heap property.
\n\n4) insert(): Inserting a new key takes O(Logn) time. We add a new key at the end of the tree. IF new key is greater than its parent, then we don’t need to do anything. Otherwise, we need to traverse up to fix the violated heap property.
\n\n5) delete(): Deleting a key also takes O(Logn) time. We replace the key to be deleted with minum infinite by calling decreaseKey(). After decreaseKey(), the minus infinite value must reach root, so we call extractMin() to remove key.
\n"/>
    <TextView
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:text="BINOMIAL HEAP"
        android:textSize="20sp"
        android:background="#5C6BC0"
        android:textColor="#ffffff"
        android:layout_margin="8dp"
        android:textStyle="bold"/>
    <TextView
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:textColor="#ffffff"
        android:text="\n\nA Binomial Heap is a collection of Binomial Trees

\n\nWhat is a Binomial Tree?
\n\nA Binomial Tree of order 0 has 1 node. A Binomial Tree of order k can be constructed by taking two binomial trees of order k-1, and making one as leftmost child of other.
\n\nA Binomial Tree of order k has following properties.
\n\na) It has exactly 2k nodes.
\n\nb) It has depth as k.
\n\nc) There are exactly kCi nodes at depth i for i = 0, 1, . . . , k.
\n\nd) The root has degree k and children of root are themselves Binomial Trees with order k-1, k-2,.. 0 from left to right.
\n"/>
    <ImageView
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:src="@drawable/heap"
        android:scaleType="fitXY"/>
    <TextView
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:text="OPERATIONS ON BINAOMIAL HEAP"
        android:textSize="20sp"
        android:background="#5C6BC0"
        android:textColor="#ffffff"
        android:layout_marginTop="32dp"
        android:textStyle="bold"/>
    <TextView
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:textColor="#ffffff"
        android:text="\n\n1) insert(H, k): Inserts a key ‘k’ to Binomial Heap ‘H’. This operation first creates a Binomial Heap with single key ‘k’, then calls union on H and the new Binomial heap.

\n\n2) getMin(H): A simple way to getMin() is to traverse the list of root of Binomial Trees and return the minimum key. This implementation requires O(Logn) time. It can be optimized to O(1) by maintaining a pointer to minimum key root.

\n\n3) extractMin(H): This operation also uses union(). We first call getMin() to find the minimum key Binomial Tree, then we remove the node and create a new Binomial Heap by connecting all subtrees of the removed minimum node. Finally we call union() on H and the newly created Binomial Heap. This operation requires O(Logn) time.

\n\n4) delete(H): Like Binary Heap, delete operation first reduces the key to minus infinite, then calls extractMin().

\n\n5) decreaseKey(H): decreaseKey() is also similar to Binary Heap. We compare the decreases key with it parent and if parent’s key is more, we swap keys and recur for parent. We stop when we either reach a node whose parent has smaller key or we hit the root node. Time complexity of decreaseKey() is O(Logn).\n"/>

    <TextView
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:text="FIBONACCI HEAP"
        android:textSize="20sp"
        android:background="#5C6BC0"
        android:textColor="#ffffff"
        android:layout_margin="8dp"
        android:textStyle="bold"/>

    <TextView
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:textColor="#ffffff"
        android:text="Like Binomial Heap, Fibonacci Heap is a collection of trees with min-heap or max-heap property. \n\nIn Fibonacci Heap, trees can can have any shape even all trees can be single nodes (This is unlike Binomial Heap where every tree has to be Binomial Tree).\n\n"/>
    <ImageView
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:scaleType="fitXY"
        android:src="@drawable/fibheap"/>
    <TextView
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:textColor="#ffffff"
        android:text="\n\nFibonacci Heap maintains a pointer to minimum value (which is root of a tree). All tree roots are connected using circular doubly linked list, so all of them can be accessed using single ‘min’ pointer.
\n\nThe main idea is to execute operations in “lazy” way. For example merge operation simply links two heaps, insert operation simply adds a new tree with single node. The operation extract minimum is the most complicated operation.
It does delayed work of consolidating trees. This makes delete also complicated as delete first decreases key to minus infinite, then calls extract minimum.\n\n"/>

    <TextView
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        android:id="@+id/heap_more"
        android:textStyle="bold"
        android:text="Read more.."
        android:textColor="#00E676"
        android:onClick="heap_more"/>

</LinearLayout>
</ScrollView>