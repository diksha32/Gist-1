<?xml version="1.0" encoding="utf-8"?>
<ScrollView xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:fillViewport="true">
    <LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
        xmlns:tools="http://schemas.android.com/tools"
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        android:paddingBottom="@dimen/activity_vertical_margin"
        android:paddingLeft="@dimen/activity_horizontal_margin"
        android:paddingRight="@dimen/activity_horizontal_margin"
        android:paddingTop="@dimen/activity_vertical_margin"
        android:orientation="vertical"
        android:background="@drawable/background1"
        tools:context="com.example.hp.above.NormalizationActivity">

        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:textSize="25sp"
            android:background="#FFFFFF"
            android:textColor="#B71C1C"
            android:text="Normalization of Database"/>
        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:textColor="#FFFFFF"
            android:text="\n\nA Database Normalisation is a technique of organizing the data in the database. Normalization is a systematic approach of decomposing tables to eliminate data redundancy and undesirable characteristics like Insertion, Update and Deletion Anamolies. It is a multi-step process that puts data into tabular form by removing duplicated data from the relation tables.

\nNormalization is used for mainly two purpose,

\n1)Eliminating reduntant(useless) data.
\n2)Ensuring data dependencies make sense i.e data is logically stored"/>
        <View
            android:layout_width="match_parent"
            android:layout_height="1dp"
            android:layout_marginTop="5sp"
            android:background="@android:color/darker_gray"/>

        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:textSize="20sp"
            android:background="#FFFFFF"
            android:textColor="#B71C1C"
            android:layout_marginTop="10dp"
            android:text="Problem without Normalization"/>

        <TextView
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:textColor="#FFFFFF"
            android:text="\nWithout Normalization, it becomes difficult to handle and update the database, without facing data loss. Insertion, Updation and Deletion Anamolies are very frequent if Database is not Normalized. To understand these anomalies let us take an example of Student table"/>
        <ImageView
            android:src="@drawable/problem"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_marginTop="10dp"
            android:layout_marginBottom="8dp"
            android:scaleType="fitXY"/>
        <TextView
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:textColor="#FFFFFF"
            android:text="\n*Updation Anamoly : To update address of a student who occurs twice or more than twice in a table, we will have to update S_Address column in all the rows, else data will become inconsistent.
\n*Insertion Anamoly : Suppose for a new admission, we have a Student id(S_id), name and address of a student but if student has not opted for any subjects yet then we have to insert NULL there, leading to Insertion Anamoly.
\n*Deletion Anamoly : If (S_id) 401 has only one subject and temporarily he drops it, when we delete that row, entire student record will be deleted along with it."/>


        <View
            android:layout_width="match_parent"
            android:layout_height="1dp"
            android:layout_marginTop="5sp"
            android:background="@android:color/darker_gray"/>

        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:textSize="20sp"
            android:background="#FFFFFF"
            android:textColor="#B71C1C"
            android:layout_marginTop="10dp"
            android:text="Normalization Rules"/>
        <TextView
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:textColor="#FFFFFF"
            android:text="\nNormalization rule are divided into following normal form.

\n1) First Normal Form
\n2) Second Normal Form
\n3) Third Normal Form
\n4) BCNF"/>


        <View
            android:layout_width="match_parent"
            android:layout_height="1dp"
            android:layout_marginTop="5sp"
            android:background="@android:color/darker_gray"/>


        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:textSize="20sp"
            android:background="#FFFFFF"
            android:textColor="#B71C1C"
            android:layout_marginTop="10dp"
            android:text="First Normal Form (1NF) "/>
        <TextView
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:textColor="#FFFFFF"
            android:text="\nAs per First Normal Form, no two Rows of data must contain repeating group of information i.e each set of column must have a unique value, such that multiple columns cannot be used to fetch the same row. Each table should be organized into rows, and each row should have a primary key that distinguishes it as unique.

\nThe Primary key is usually a single column, but sometimes more than one column can be combined to create a single primary key. For example consider a table which is not in First normal form

"/>
        <TextView
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:textSize="10sp"
            android:textStyle="bold"
            android:background="#FFFFFF"
            android:textColor="#B71C1C"
            android:layout_marginTop="10dp"
            android:text="\nStudent Table"/>

        <ImageView
            android:src="@drawable/studenttable"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_marginTop="10dp"
            android:layout_marginBottom="8dp"
            android:scaleType="fitXY"/>
        <TextView
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:textColor="#FFFFFF"
            android:text="\nIn First Normal Form, any row must not have a column in which more than one value is saved, like separated with commas. Rather than that, we must separate such data into multiple rows"/>



        <TextView
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:textSize="10sp"
            android:textStyle="bold"
            android:background="#FFFFFF"
            android:textColor="#B71C1C"
            android:layout_marginTop="10dp"
            android:text="\nStudent Table following 1 Nf will be:"/>



        <ImageView
            android:src="@drawable/studenttable1nf"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_marginTop="10dp"
            android:layout_marginBottom="8dp"
            android:scaleType="fitXY"/>

        <TextView
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:textColor="#FFFFFF"
            android:text="\nUsing the First Normal Form, data redundancy increases, as there will be many columns with same data in multiple rows but each row as a whole will be unique.

"/>


        <View
            android:layout_width="match_parent"
            android:layout_height="1dp"
            android:layout_marginTop="5sp"
            android:background="@android:color/darker_gray"/>

        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:textSize="20sp"
            android:background="#FFFFFF"
            android:textColor="#B71C1C"
            android:layout_marginTop="10dp"
            android:text="Second Normal Form (2NF)"/>
        <TextView
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:textColor="#FFFFFF"
            android:text="\nAs per the Second Normal Form there must not be any partial dependency of any column on primary key. It means that for a table that has concatenated primary key, each column in the table that is not part of the primary key must depend upon the entire concatenated key for its existence. If any column depends only on one part of the concatenated key, then the table fails Second normal form.

\nIn example of First Normal Form there are two rows for Adam, to include multiple subjects that he has opted for. While this is searchable, and follows First normal form, it is an inefficient use of space. Also in the above Table in First Normal Form, while the candidate key is {Student, Subject}, Age of Student only depends on Student column, which is incorrect as per Second Normal Form. To achieve second normal form, it would be helpful to split out the subjects into an independent table, and match them up using the student names as foreign keys"/>

        <TextView
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:textSize="10sp"
            android:textStyle="bold"
            android:background="#FFFFFF"
            android:textColor="#B71C1C"
            android:layout_marginTop="10dp"
            android:text="\nNew Student Table following 2 NF will be:"/>

        <ImageView
            android:src="@drawable/studenttable2nf"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_marginTop="10dp"
            android:scaleType="fitXY"/>

        <TextView
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:textColor="#FFFFFF"
            android:text="\nIn Student Table the candidate key will be Student column, because all other column i.e Age is dependent on it"/>

        <TextView
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:textSize="10sp"
            android:textStyle="bold"
            android:background="#FFFFFF"
            android:textColor="#B71C1C"
            android:layout_marginTop="10dp"
            android:text="\nNew Student Table introduced for 2 NF will be:"/>

        <ImageView
            android:src="@drawable/studenttable2nf2"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_marginTop="10dp"
            android:scaleType="fitXY"/>

        <TextView
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:textColor="#FFFFFF"
            android:text="\nIn Subject Table the candidate key will be {Student, Subject} column. Now, both the above tables qualifies for Second Normal Form and will never suffer from Update Anomalies. Although there are a few complex cases in which table in Second Normal Form suffers Update Anomalies, and to handle those scenarios Third Normal Form is there"/>


        <View
            android:layout_width="match_parent"
            android:layout_height="1dp"
            android:layout_marginTop="5sp"
            android:background="@android:color/darker_gray"/>



        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:textSize="20sp"
            android:background="#FFFFFF"
            android:textColor="#B71C1C"
            android:layout_marginTop="10dp"
            android:text="Third Normal Form (3NF)"/>
        <TextView
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:textColor="#FFFFFF"
            android:text="\nThird Normal form applies that every non-prime attribute of table must be dependent on primary key, or we can say that, there should not be the case that a non-prime attribute is determined by another non-prime attribute. So this transitive functional dependency should be removed from the table and also the table must be in Second Normal form. For example, consider a table with following fields"/>


        <TextView
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:textSize="10sp"
            android:textStyle="bold"
            android:background="#FFFFFF"
            android:textColor="#B71C1C"
            android:layout_marginTop="10dp"
            android:text="\nStudent Detail Table"/>

        <ImageView
            android:src="@drawable/table3nf1"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_marginTop="10dp"
            android:scaleType="fitXY"/>
        <TextView
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:textColor="#FFFFFF"
            android:text="\nIn this table Student_id is Primary key, but street, city and state depends upon Zip. The dependency between zip and other fields is called transitive dependency. Hence to apply 3NF, we need to move the street, city and state to new table, with Zip as primary key"/>


        <TextView
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:textSize="10sp"
            android:textStyle="bold"
            android:background="#FFFFFF"
            android:textColor="#B71C1C"
            android:layout_marginTop="10dp"
            android:text="\nNew Student Detail Table"/>

        <ImageView
            android:src="@drawable/table3nf2"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_marginTop="10dp"
            android:scaleType="fitXY"/>

        <TextView
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:textSize="10sp"
            android:textStyle="bold"
            android:background="#FFFFFF"
            android:textColor="#B71C1C"
            android:layout_marginTop="10dp"
            android:text="\nAddress Table"/>

        <ImageView
            android:src="@drawable/table3nf3"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_marginTop="10dp"
            android:scaleType="fitXY"/>

        <TextView
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:textColor="#FFFFFF"
            android:text="\nThe advantage of removing transtive dependency is,

\nAmount of data duplication is reduced.
\nData integrity achieved."/>

        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:textSize="20sp"
            android:background="#FFFFFF"
            android:textColor="#B71C1C"
            android:layout_marginTop="10dp"

            android:text="Boyce and Codd Normal Form (BNCF)"/>
        <TextView
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:textColor="#FFFFFF"
            android:text="\nBoyce and Codd Normal Form is a higher version of the Third Normal form. This form deals with certain type of anamoly that is not handled by 3NF. A 3NF table which does not have multiple overlapping candidate keys is said to be in BCNF. For a table to be in BCNF, following conditions must be satisfied:

\nR must be in 3rd Normal Form
\nand, for each functional dependency ( X -> Y ), X should be a super Key"/>



        <ImageView
            android:src="@drawable/bcnf"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_marginTop="10dp"
            android:scaleType="fitXY"/>



    </LinearLayout>
</ScrollView>