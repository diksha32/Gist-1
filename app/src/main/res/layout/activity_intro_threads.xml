<?xml version="1.0" encoding="utf-8"?>
<ScrollView xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:fillViewport="true">
    <LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
        xmlns:tools="http://schemas.android.com/tools"
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        android:paddingBottom="@dimen/activity_vertical_margin"
        android:paddingLeft="@dimen/activity_horizontal_margin"
        android:paddingRight="@dimen/activity_horizontal_margin"
        android:paddingTop="@dimen/activity_vertical_margin"
        android:orientation="vertical"
        android:background="@drawable/english"
        tools:context="com.example.hp.above.IntroThreadsActivity">

        <TextView
            android:layout_width="match_parent"
            android:textColor="#FFFFFF"
            android:background="#78909C"
            android:layout_height="wrap_content"
            android:text="What are Threads?"
            android:textSize="20sp"
            android:textStyle="bold"
            android:layout_margin="8dp"/>

        <TextView
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:textColor="#FFFF00"
            android:text="\nThread is an execution unit which consists of its own program counter, a stack, and a set of registers. Threads are also known as Lightweight processes. Threads are popular way to improve application through parallelism. The CPU switches rapidly back and forth among the threads giving illusion that the threads are running in parallel.
\n
\nAs each thread has its own independent resource for process execution, multpile processes can be executed parallely by increasing number of threads.
"/>

        <ImageView
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:src="@drawable/threads1"/>

        <TextView
            android:layout_width="match_parent"
            android:textColor="#FFFFFF"
            android:background="#78909C"
            android:layout_marginTop="10dp"
            android:layout_height="wrap_content"
            android:text="Types of Thread"
            android:textSize="16sp"
            android:textStyle="bold"
            android:layout_margin="8dp"/>

        <TextView
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:textColor="#FFFF00"
            android:text="\nThere are two types of threads :
\n
\n1. User Threads
\n2. Kernel Threads
\n\nUser threads, are above the kernel and without kernel support. These are the threads that application programmers use in their programs.
\n
\nKernel threads are supported within the kernel of the OS itself. All modern OSs support kernel level threads, allowing the kernel to perform multiple simultaneous tasks and/or to service multiple kernel system calls simultaneously.
"/>

        <TextView
            android:layout_width="match_parent"
            android:textColor="#FFFFFF"
            android:background="#78909C"
            android:layout_marginTop="10dp"
            android:layout_height="wrap_content"
            android:text="Multithreading Models"
            android:textSize="16sp"
            android:textStyle="bold"
            android:layout_margin="8dp"/>

        <TextView
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:textColor="#FFFF00"
            android:text="\nThe user threads must be mapped to kernel threads, by one of the following strategies.
\n
\n1. Many-To-One Model
\n2. One-To-One Model
\n3. Many-To-Many Model"/>

        <TextView
            android:layout_width="match_parent"
            android:textColor="#FFFFFF"
            android:background="#78909C"
            android:layout_marginTop="10dp"
            android:layout_height="wrap_content"
            android:text="Many-To-One Model"
            android:textSize="16sp"
            android:textStyle="bold"
            android:layout_margin="8dp"/>

        <TextView
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:textColor="#FFFF00"
            android:text="\n1. In the many-to-one model, many user-level threads are all mapped onto a single kernel thread.
\n2. Thread management is handled by the thread library in user space, which is efficient in nature.
"/>

        <ImageView
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:layout_marginTop="32dp"
            android:layout_marginBottom="32dp"
            android:src="@drawable/threads2"/>

        <TextView
            android:layout_width="match_parent"
            android:textColor="#FFFFFF"
            android:background="#78909C"
            android:layout_marginTop="10dp"
            android:layout_height="wrap_content"
            android:text="One-To-One Model"
            android:textSize="16sp"
            android:textStyle="bold"
            android:layout_margin="8dp"/>

        <TextView
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:textColor="#FFFF00"
            android:text="\n1. The one-to-one model creates a separate kernel thread to handle each and every user thread.
\n2. Most implementations of this model place a limit on how many threads can be created.
\n3. Linux and Windows from 95 to XP implement the one-to-one model for threads."/>

        <ImageView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_marginBottom="32dp"
            android:layout_marginTop="32dp"
            android:src="@drawable/threads3"/>

        <TextView
            android:layout_width="match_parent"
            android:textColor="#FFFFFF"
            android:background="#78909C"
            android:layout_marginTop="10dp"
            android:layout_height="wrap_content"
            android:text="Many-To-Many Model"
            android:textSize="16sp"
            android:textStyle="bold"
            android:layout_margin="8dp"/>

        <TextView
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:textColor="#FFFF00"
            android:text="\nThe many-to-many model multiplexes any number of user threads onto an equal or smaller number of kernel threads, combining the best features of the one-to-one and many-to-one models.
\n\n1. Users can create any number of the threads.
\n2. Blocking the kernel system calls does not block the entire process.
\n3. Processes can be split across multiple processors."/>

        <ImageView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:scaleType="fitXY"
            android:layout_marginBottom="32dp"
            android:layout_marginTop="32dp"
            android:src="@drawable/threads4"/>

        <TextView
            android:layout_width="match_parent"
            android:textColor="#FFFFFF"
            android:background="#78909C"
            android:layout_marginTop="10dp"
            android:layout_height="wrap_content"
            android:text="Thread Libraries"
            android:textSize="16sp"
            android:textStyle="bold"
            android:layout_margin="8dp"/>

        <TextView
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:textColor="#FFFF00"
            android:text="\nThread libraries provides programmers with API for creating and managing of threads.
\n
\nThread libraries may be implemented either in user space or in kernel space. The user space involves API functions implemented solely within user space, with no kernel support. The kernel space involves system calls, and requires a kernel with thread library support.
\n
\n
\nThere are three types of thread :
\n
\n1. POSIX Pitheads, may be provided as either a user or kernel library, as an extension to the POSIX standard.
\n2. Win32 threads, are provided as a kernel-level library on Windows systems.
\n3. Java threads - Since Java generally runs on a Java Virtual Machine, the implementation of threads is based upon whatever OS and hardware the JVM is running on, i.e. either Pitheads or Win32 threads depending on the system
"/>

        <TextView
            android:layout_width="match_parent"
            android:textColor="#FFFFFF"
            android:background="#78909C"
            android:layout_marginTop="10dp"
            android:layout_height="wrap_content"
            android:text="Benefits of Multithreading"
            android:textSize="16sp"
            android:textStyle="bold"
            android:layout_margin="8dp"/>

        <TextView
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:textColor="#FFFF00"
            android:text="\n\n1. Responsiveness
\n2. Resource sharing, hence allowing better utilization of resources.
\n3. Economy. Creating and managing threads becomes easier.
\n4. Scalability. One thread runs on one CPU. In Multithreaded processes, threads can be distributed over a series of processors to scale.
\n5. Context Switching is smooth. Context switching refers to the procedure followed by CPU to change from one task to another."/>

        <TextView
            android:layout_width="match_parent"
            android:textColor="#FFFFFF"
            android:background="#78909C"
            android:layout_marginTop="10dp"
            android:layout_height="wrap_content"
            android:text="Multithreading Issues"
            android:textSize="16sp"
            android:textStyle="bold"
            android:layout_margin="8dp"/>

        <TextView
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:textColor="#FFFF00"
            android:text="\n\n1. Thread Cancellation.
\nThread cancellation means terminating a thread before it has finished working. There can be two approaches for this, one is Asynchronous cancellation, which terminates the target thread immediately. The other is Deferred cancellation allows the target thread to periodically check if it should be cancelled.
\n
\n2. Signal Handling.
\nSignals are used in UNIX systems to notify a process that a particular event has occurred. Now in when a Multithreaded process receives a signal, to which thread it must be delivered? It can be delivered to all, or a single thread.
\n
\n3. fork() System Call.
\nfork() is a system call executed in the kernel through which a process creates a copy of itself. Now the problem in Multithreaded process is, if one thread forks, will the entire process be copied or not?
\n
\n4. Security Issues because of extensive sharing of resources between multiple threads.
\nThere are many other issues that you might face in a multithreaded process, but there are appropriate solutions available for them. Pointing out some issues here was just to study both sides of the coin.
"/>



    </LinearLayout>
</ScrollView>