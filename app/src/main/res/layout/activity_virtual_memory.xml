<?xml version="1.0" encoding="utf-8"?>
<ScrollView xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:fillViewport="true">
    <LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
        xmlns:tools="http://schemas.android.com/tools"
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        android:paddingBottom="@dimen/activity_vertical_margin"
        android:paddingLeft="@dimen/activity_horizontal_margin"
        android:paddingRight="@dimen/activity_horizontal_margin"
        android:paddingTop="@dimen/activity_vertical_margin"
        android:orientation="vertical"
        android:background="@drawable/english"
        tools:context="com.example.hp.above.VirtualMemoryActivity">

        <TextView
            android:layout_width="match_parent"
            android:textColor="#FFFFFF"
            android:background="#78909C"
            android:layout_height="wrap_content"
            android:text="Virtual Memory"
            android:textSize="20sp"
            android:textStyle="bold"
            android:layout_margin="8dp"/>

        <TextView
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:textColor="#FFFF00"
            android:text="\nVirtual Memory is a space where large programs can store themselves in form of pages while their execution and only the required pages or portions of processes are loaded into the main memory. This technique is useful as large virtual memory is provided for user programs when a very small physical memory is there.
\n
\nIn real scenarios, most processes never need all their pages at once, for following reasons :
\n
\n1. Error handling code is not needed unless that specific error occurs, some of which are quite rare.
\n2. Arrays are often over-sized for worst-case scenarios, and only a small fraction of the arrays are actually used in practice.
\n3. Certain features of certain programs are rarely used.

"/>
        <TextView
            android:layout_width="match_parent"
            android:textColor="#FFFFFF"
            android:background="#78909C"
            android:layout_marginTop="10dp"
            android:layout_height="wrap_content"
            android:text="Benefits of having Virtual Memory :"
            android:textSize="16sp"
            android:textStyle="bold"
            android:layout_margin="8dp"/>

        <TextView
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:textColor="#FFFF00"
            android:text="\n1. Large programs can be written, as virtual space available is huge compared to physical memory.
\n2. Less I/O required, leads to faster and easy swapping of processes.
\n3. More physical memory available, as programs are stored on virtual memory, so they occupy very less space on actual physical memory.
"/>

        <TextView
            android:layout_width="match_parent"
            android:textColor="#FFFFFF"
            android:background="#78909C"
            android:layout_marginTop="10dp"
            android:layout_height="wrap_content"
            android:text="Demand Paging"
            android:textSize="16sp"
            android:textStyle="bold"
            android:layout_margin="8dp"/>

        <TextView
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:textColor="#FFFF00"
            android:text="\nThe basic idea behind demand paging is that when a process is swapped in, its pages are not swapped in all at once. Rather they are swapped in only when the process needs them(On demand). This is termed as lazy swapper, although a pager is a more accurate term.
        "/>

        <ImageView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:scaleType="fitXY"
            android:src="@drawable/virtual1"/>
        <TextView
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:textColor="#FFFF00"
            android:text="\nInitially only those pages are loaded which will be required the process immediately.
\n
\nThe pages that are not moved into the memory, are marked as invalid in the page table. For an invalid entry the rest of the table is empty. In case of pages that are loaded in the memory, they are marked as valid along with the information about where to find the swapped out page.
\n
\nWhen the process requires any of the page that is not loaded into the memory, a page fault trap is triggered and following steps are followed,
\n
\n1. The memory address which is requested by the process is first checked, to verify the request made by the process.
\n2. If its found to be invalid, the process is terminated.
\n3. In case the request by the process is valid, a free frame is located, possibly from a free-frame list, where the required page will be moved.
\n4. A new operation is scheduled to move the necessary page from disk to the specified memory location. ( This will usually block the process on an I/O wait, allowing some other process to use the CPU in the meantime. )
\n5. When the I/O operation is complete, the process's page table is updated with the new frame number, and the invalid bit is changed to valid.
\n6. The instruction that caused the page fault must now be restarted from the beginning.
\n\nThere are cases when no pages are loaded into the memory initially, pages are only loaded when demanded by the process by generating page faults. This is called Pure Demand Paging.
\n
\nThe only major issue with Demand Paging is, after a new page is loaded, the process starts execution from the beginning. Its is not a big issue for small programs, but for larger programs it affects performance drastically."/>


        <TextView
            android:layout_width="match_parent"
            android:textColor="#FFFFFF"
            android:background="#78909C"
            android:layout_marginTop="10dp"
            android:layout_height="wrap_content"
            android:text="Page Replacement"
            android:textSize="16sp"
            android:textStyle="bold"
            android:layout_margin="8dp"/>

        <TextView
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:textColor="#FFFF00"
            android:text="\nAs studied in Demand Paging, only certain pages of a process are loaded initially into the memory. This allows us to get more number of processes into the memory at the same time. but what happens when a process requests for more pages and no free memory is available to bring them in. Following steps can be taken to deal with this problem :
\n
\n1. Put the process in the wait queue, until any other process finishes its execution thereby freeing frames.
\n2. Or, remove some other process completely from the memory to free frames.
\n3. Or, find some pages that are not being used right now, move them to the disk to get free frames. This technique is called Page replacement and is most commonly used. We have some great algorithms to carry on page replacement efficiently.
"/>

        <TextView
            android:layout_width="match_parent"
            android:textColor="#FFFFFF"
            android:background="#78909C"
            android:layout_marginTop="10dp"
            android:layout_height="wrap_content"
            android:text="Basic Page Replacement"
            android:textSize="16sp"
            android:textStyle="bold"
            android:layout_margin="8dp"/>

        <TextView
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:textColor="#FFFF00"
            android:text="\n1. Find the location of the page requested by ongoing process on the disk.
\n2. Find a free frame. If there is a free frame, use it. If there is no free frame, use a page-replacement algorithm to select any existing frame to be replaced, such frame is known as victim frame.
\n3. Write the victim frame to disk. Change all related page tables to indicate that this page is no longer in memory.
\n4. Move the required page and store it in the frame. Adjust all related page and frame tables to indicate the change.
\n5. Restart the process that was waiting for this page.
"/>

        <TextView
            android:layout_width="match_parent"
            android:textColor="#FFFFFF"
            android:background="#78909C"
            android:layout_marginTop="10dp"
            android:layout_height="wrap_content"
            android:text="FIFO Page Replacement"
            android:textSize="16sp"
            android:textStyle="bold"
            android:layout_margin="8dp"/>

        <TextView
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:textColor="#FFFF00"
            android:text="\n1. A very simple way of Page replacement is FIFO (First in First Out)
\n2. As new pages are requested and are swapped in, they are added to tail of a queue and the page which is at the head becomes the victim.
\n3. Its not an effective way of page replacement but can be used for small systems.
"/>

        <TextView
            android:layout_width="match_parent"
            android:textColor="#FFFFFF"
            android:background="#78909C"
            android:layout_marginTop="10dp"
            android:layout_height="wrap_content"
            android:text="LRU Page Replacement"
            android:textSize="16sp"
            android:textStyle="bold"
            android:layout_margin="8dp"/>

        <TextView
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:textColor="#FFFF00"
            android:text="\nThe Least Recently Used (LRU) Page Replacement Algorithm. A good approximation to the optimal algorithm is based on the observation that pages that have been heavily used in the last few instructions will probably be heavily used again in the next few.
\n Why: pages recently used tend to be used again soon (on average)
\n List of all pages in memory (most recently in the head, least recently used in the tail)
\n List update at each memory reference!
\n List operations are expensive (e.g. find a page)

\n Idea! Get a counter, maybe a 64bit counter
\n The counter is incremented after each instruction and stored into the page entry at each reference
\n Store the value of the counter in each entry of the page table (last access time to the page)
\n When is time to remove a page, find the lowest counter value (this is the LRU page)
\n Nice and good but expensive: it requires dedicated hardware.
"/>

        <ImageView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:scaleType="fitXY"
            android:src="@drawable/virtual3"/>

        <TextView
            android:layout_width="match_parent"
            android:textColor="#FFFFFF"
            android:background="#78909C"
            android:layout_marginTop="10dp"
            android:layout_height="wrap_content"
            android:text="Thrashing"
            android:textSize="16sp"
            android:textStyle="bold"
            android:layout_margin="8dp"/>

        <TextView
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:textColor="#FFFF00"
            android:text="\nA process that is spending more time paging than executing is said to be thrashing. In other words it means, that the process doesn't have enough frames to hold all the pages for its execution, so it is swapping pages in and out very frequently to keep executing. Sometimes, the pages which will be required in the near future have to be swapped out.
\n
\nInitially when the CPU utilization is low, the process scheduling mechanism, to increase the level of multiprogramming loads multiple processes into the memory at the same time, allocating a limited amount of frames to each process. As the memory fills up, process starts to spend a lot of time for the required pages to be swapped in, again leading to low CPU utilization because most of the proccesses are waiting for pages. Hence the scheduler loads more processes to increase CPU utilization, as this continues at a point of time the complete system comes to a stop.
\n
"/>

        <ImageView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:scaleType="fitXY"
            android:src="@drawable/virtual2"/>
    </LinearLayout>
</ScrollView>