<?xml version="1.0" encoding="utf-8"?>
<ScrollView xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:fillViewport="true">
    <LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
        xmlns:tools="http://schemas.android.com/tools"
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        android:paddingBottom="@dimen/activity_vertical_margin"
        android:paddingLeft="@dimen/activity_horizontal_margin"
        android:paddingRight="@dimen/activity_horizontal_margin"
        android:paddingTop="@dimen/activity_vertical_margin"
        android:orientation="vertical"
        android:background="@drawable/background6"
        tools:context="com.example.hp.above.JavaAccessmodifierActivity">


        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:background="#311B92"
            android:textColor="#FFFFFF"
            android:textSize="20sp"
            android:layout_marginTop="10dp"
            android:text="Modifiers in Java"/>

        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:textColor="#FFFFFF"
            android:text="\n\nModifiers are keywords that are added to change meaning of a definition. In Java, modifiers are catagorized into two types,

\n1) Access control modifier
\n2) Non Access Modifier"/>



        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:background="#311B92"
            android:textColor="#FFFFFF"
            android:textSize="20sp"
            android:layout_marginTop="10dp"
            android:text="1) Access Control Modifier"/>

        <TextView
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:textColor="#FFFFFF"
            android:text="\n\nJava language has four access modifier to control access levels for classes, variable methods and constructor.

\n1) Default : Default has scope only inside the same package
\n2) Public : Public scope is visible everywhere
\n3) Protected : Protected has scope within the package and all sub classes
\n4) Private : Private has scope only within the classes
"/>


        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:background="#311B92"
            android:textColor="#FFFFFF"
            android:textSize="20sp"
            android:layout_marginTop="10dp"
            android:text="2) Non-Access Control Modifier"/>

        <TextView
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:textColor="#FFFFFF"
            android:text="\n\nNon-access modifiers do not change the accessibility of variables and methods, but they do provide them special properties. Non-access modifiers are of 5 types,

\n1. Final
\n2. Static
\n3. Transient
\n4. Synchronized
\n5. Volatile
"/>

        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:background="#311B92"
            android:textColor="#FFFFFF"
            android:textSize="20sp"
            android:layout_marginTop="10dp"
            android:text="Final"/>

        <TextView
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:textColor="#FFFFFF"
            android:text="\n\nFinal modifier is used to declare a field as final i.e. it prevents its content from being modified. Final field must be initialized when it is declared."/>



        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:background="#311B92"
            android:textColor="#FFFFFF"
            android:textSize="20sp"
            android:layout_marginTop="10dp"
            android:text="Static"/>

        <TextView
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:textColor="#FFFFFF"
            android:text="Static Modifiers are used to create class variable and class methods which can be accessed without instance of a class. Lets study how it works with variables and member functions."/>





        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:background="#311B92"
            android:textColor="#FFFFFF"
            android:textSize="20sp"
            android:layout_marginTop="10dp"
            android:text="Transient Modifier"/>

        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:textColor="#FFFFFF"
            android:text="\n\nWhen an instance variable is declared as transient, then its value doesn't persist when an object is serialized"/>



        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:background="#311B92"
            android:textColor="#FFFFFF"
            android:textSize="20sp"
            android:layout_marginTop="10dp"
            android:text="Synchronized Modifier"/>




        <TextView
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:textColor="#FFFFFF"
            android:text="\nWhen a method is synchronized it can be accessed by only one thread at a time. We will discuss it in detail in Thread."/>



        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:background="#311B92"
            android:textColor="#FFFFFF"
            android:textSize="20sp"
            android:layout_marginTop="10dp"
            android:text="Volatile Modifier"/>




        <TextView
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:textColor="#FFFFFF"
            android:text="\nWhen a method is synchronized it can be accessed by only one thread at a time. We will discuss it in detail in Thread."/>




    </LinearLayout>
</ScrollView>