<?xml version="1.0" encoding="utf-8"?>
<ScrollView xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:fillViewport="true">
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:paddingBottom="@dimen/activity_vertical_margin"
    android:paddingLeft="@dimen/activity_horizontal_margin"
    android:paddingRight="@dimen/activity_horizontal_margin"
    android:paddingTop="@dimen/activity_vertical_margin"
    android:orientation="vertical"
    android:background="#000033"
    tools:context="com.example.hp.above.QueueActivity">
    <TextView
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:text="QUEUE"
        android:background="#5C6BC0"
        android:textColor="#ffffff"
        android:textStyle="bold"/>

    <TextView
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        android:textColor="#ffffff"
        android:text="\n1.A queue is a type of abstract data type that can be implemented as a linear or circular list and works on First-in-First-Out (FIFO) principle.
        \n\n2.A queue has a front and a rear.\n"/>
    <ImageView
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:src="@drawable/queue1"
        android:scaleType="fitXY"/>
    <TextView
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:textColor="#ffffff"
        android:text="\n\n3. Example of queue is a single-lane one-way road, where the vehicle enters first, exits first.
        More real-world example can be seen as queues at ticket windows and bus-stops.\n"/>
    <TextView
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:text="Basic Operations"
        android:background="#5C6BC0"
        android:textColor="#ffffff"
        android:textStyle="bold"/>
    <TextView
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:textColor="#ffffff"
        android:text="\n\n•	enqueue() − add (store) an item to the queue.
\n\n•	dequeue() − remove (access) an item from the queue.
\n\nEnqueue Operation
\nAs queue maintains two data pointers, front and rear, its operations are comparatively more difficult to implement than Queue.
\n\nDequeue Operation
\nAccessing data from queue is a process of two tasks − access the data where front is pointing and remove the data after access.
\n\nQueue can be of four types:
\n1. Simple Queue
\n2. Circular Queue
\n3. Priority Queue
\n4. Dequeue (Double Ended queue)
\n\n1. Simple Queue: In Simple queue Insertion occurs at the rear of the list, and deletion occurs at the front of the list.
\n\n2. Circular Queue : A circular queue is a queue in which all nodes are treated as circular such that the first node follows the last node.
\n\n3. Priority Queue: A priority queue is a queue that contains items that have some preset priority.
 When an element has to be removed from a priority queue, the item with the highest priority is removed first
 \n\n4. Dequeue (Double Ended queue): In dequeue(double ended queue) Insertion and Deletion occur at both the ends
 i.e. front and rear of the queue."/>

    <TextView
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        android:text="\n\nRead More...\n\n"
        android:id="@+id/queue"
        android:textSize="15sp"
        android:textColor="#00E676"
        android:onClick="queue"/>

</LinearLayout>
</ScrollView>
